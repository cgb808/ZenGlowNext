// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: services/logging/v1/logging.proto

package loggingv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	LogService_WriteLogStream_FullMethodName = "/logging.v1.LogService/WriteLogStream"
)

// LogServiceClient is the client API for LogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogServiceClient interface {
	// A client streams log frames; the server returns a final confirmation.
	WriteLogStream(ctx context.Context, opts ...grpc.CallOption) (LogService_WriteLogStreamClient, error)
}

type logServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogServiceClient(cc grpc.ClientConnInterface) LogServiceClient {
	return &logServiceClient{cc}
}

func (c *logServiceClient) WriteLogStream(ctx context.Context, opts ...grpc.CallOption) (LogService_WriteLogStreamClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LogService_ServiceDesc.Streams[0], LogService_WriteLogStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &logServiceWriteLogStreamClient{ClientStream: stream}
	return x, nil
}

type LogService_WriteLogStreamClient interface {
	Send(*LogFrame) error
	CloseAndRecv() (*WriteLogResponse, error)
	grpc.ClientStream
}

type logServiceWriteLogStreamClient struct {
	grpc.ClientStream
}

func (x *logServiceWriteLogStreamClient) Send(m *LogFrame) error {
	return x.ClientStream.SendMsg(m)
}

func (x *logServiceWriteLogStreamClient) CloseAndRecv() (*WriteLogResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(WriteLogResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LogServiceServer is the server API for LogService service.
// All implementations must embed UnimplementedLogServiceServer
// for forward compatibility
type LogServiceServer interface {
	// A client streams log frames; the server returns a final confirmation.
	WriteLogStream(LogService_WriteLogStreamServer) error
	mustEmbedUnimplementedLogServiceServer()
}

// UnimplementedLogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLogServiceServer struct {
}

func (UnimplementedLogServiceServer) WriteLogStream(LogService_WriteLogStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method WriteLogStream not implemented")
}
func (UnimplementedLogServiceServer) mustEmbedUnimplementedLogServiceServer() {}

// UnsafeLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogServiceServer will
// result in compilation errors.
type UnsafeLogServiceServer interface {
	mustEmbedUnimplementedLogServiceServer()
}

func RegisterLogServiceServer(s grpc.ServiceRegistrar, srv LogServiceServer) {
	s.RegisterService(&LogService_ServiceDesc, srv)
}

func _LogService_WriteLogStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LogServiceServer).WriteLogStream(&logServiceWriteLogStreamServer{ServerStream: stream})
}

type LogService_WriteLogStreamServer interface {
	SendAndClose(*WriteLogResponse) error
	Recv() (*LogFrame, error)
	grpc.ServerStream
}

type logServiceWriteLogStreamServer struct {
	grpc.ServerStream
}

func (x *logServiceWriteLogStreamServer) SendAndClose(m *WriteLogResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *logServiceWriteLogStreamServer) Recv() (*LogFrame, error) {
	m := new(LogFrame)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LogService_ServiceDesc is the grpc.ServiceDesc for LogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logging.v1.LogService",
	HandlerType: (*LogServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WriteLogStream",
			Handler:       _LogService_WriteLogStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "services/logging/v1/logging.proto",
}
