// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: canonical.proto

package canonicalv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	CanonicalService_TopKEvents_FullMethodName = "/canonical.v1.CanonicalService/TopKEvents"
)

// CanonicalServiceClient is the client API for CanonicalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CanonicalServiceClient interface {
	TopKEvents(ctx context.Context, in *TopKQueryRequest, opts ...grpc.CallOption) (*TopKQueryResponse, error)
}

type canonicalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCanonicalServiceClient(cc grpc.ClientConnInterface) CanonicalServiceClient {
	return &canonicalServiceClient{cc}
}

func (c *canonicalServiceClient) TopKEvents(ctx context.Context, in *TopKQueryRequest, opts ...grpc.CallOption) (*TopKQueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TopKQueryResponse)
	err := c.cc.Invoke(ctx, CanonicalService_TopKEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CanonicalServiceServer is the server API for CanonicalService service.
// All implementations must embed UnimplementedCanonicalServiceServer
// for forward compatibility
type CanonicalServiceServer interface {
	TopKEvents(context.Context, *TopKQueryRequest) (*TopKQueryResponse, error)
	mustEmbedUnimplementedCanonicalServiceServer()
}

// UnimplementedCanonicalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCanonicalServiceServer struct {
}

func (UnimplementedCanonicalServiceServer) TopKEvents(context.Context, *TopKQueryRequest) (*TopKQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopKEvents not implemented")
}
func (UnimplementedCanonicalServiceServer) mustEmbedUnimplementedCanonicalServiceServer() {}

// UnsafeCanonicalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CanonicalServiceServer will
// result in compilation errors.
type UnsafeCanonicalServiceServer interface {
	mustEmbedUnimplementedCanonicalServiceServer()
}

func RegisterCanonicalServiceServer(s grpc.ServiceRegistrar, srv CanonicalServiceServer) {
	s.RegisterService(&CanonicalService_ServiceDesc, srv)
}

func _CanonicalService_TopKEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopKQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CanonicalServiceServer).TopKEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CanonicalService_TopKEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CanonicalServiceServer).TopKEvents(ctx, req.(*TopKQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CanonicalService_ServiceDesc is the grpc.ServiceDesc for CanonicalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CanonicalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "canonical.v1.CanonicalService",
	HandlerType: (*CanonicalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TopKEvents",
			Handler:    _CanonicalService_TopKEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "canonical.proto",
}
