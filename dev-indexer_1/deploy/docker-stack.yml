version: '3.8'

services:
  app:
    image: your-registry/rag-app:1.0
    secrets:
      - source: postgres_password
        target: postgres_password
        mode: 0400
      - source: jwt_secret
        target: jwt_secret
        mode: 0400
    environment:
      POSTGRES_HOST: db
      POSTGRES_DB: rag_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      JWT_SECRET_FILE: /run/secrets/jwt_secret
      REDIS_HOST: redis
      OLLAMA_HOST: leonardo
      WHISPER_SERVER_URL: 'http://whisper:8080'
    networks:
      - backend
    ports:
      - '8001:8000'
    deploy:
      mode: replicated
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      resources:
        limits:
          cpus: '1.00'
          memory: 1g
        reservations:
          cpus: '0.25'
          memory: 256m

  db:
    image: your-registry/rag-postgres:1.0
    secrets:
      - source: postgres_password
        target: postgres_password
        mode: 0400
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_DB: rag_db
    volumes:
      - db_data:/var/lib/postgresql/data
      - type: bind
        source: ./sql/
        target: /docker-entrypoint-initdb.d
        read_only: true
    networks:
      - backend
    deploy:
      replicas: 1
      placement:
        constraints: [node.labels.storage_class == zfs]
      restart_policy:
        condition: any
      resources:
        limits:
          cpus: '2.00'
          memory: 4g
        reservations:
          cpus: '0.50'
          memory: 1g

  db_pii:
    image: your-registry/rag-postgres:1.0
    secrets:
      - source: postgres_password
        target: postgres_password
        mode: 0400
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_DB: rag_pii
    volumes:
      - db_pii_data:/var/lib/postgresql/data
      - type: bind
        source: ./sql/pii_secure_schema.sql
        target: /docker-entrypoint-initdb.d/10_pii_secure_schema.sql
        read_only: true
    networks:
      - backend
    deploy:
      replicas: 1
      placement:
        constraints: [node.labels.storage_class == zfs]
      resources:
        limits:
          cpus: '2.00'
          memory: 4g
        reservations:
          cpus: '0.50'
          memory: 1g

  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    command: ["redis-server", "--save", "60", "1000", "--appendonly", "yes"]
    networks:
      - backend
    deploy:
      replicas: 1
      placement:
        constraints: [node.labels.storage_class == zfs]
      restart_policy: { condition: any }
      resources:
        limits:
          cpus: '0.50'
          memory: 512m
        reservations:
          cpus: '0.10'
          memory: 128m

volumes:
  db_data:
  db_pii_data:
  redis_data:

secrets:
  postgres_password:
    external: true
  jwt_secret:
    external: true

networks:
  backend:
    driver: overlay
    attachable: true
version: '3.8'

secrets:
  legacy_jwt:
    external: true
  supabase_jwt:
    external: true
  pg_password:
    file: ./deploy/secrets/pg_password.txt

networks:
  zenglow_net:
    driver: overlay

volumes:
  pgdata_core:
    driver: local
  pgdata_pii:
    driver: local
  redis_data:
    driver: local
  spool_data:
    driver: local

services:
  db:
    image: pgvector/pgvector:pg15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD_FILE: /run/secrets/pg_password
      POSTGRES_DB: rag_db
    volumes:
      - pgdata_core:/var/lib/postgresql/data
      - ./sql/rag_core_schema.sql:/docker-entrypoint-initdb.d/10_rag_core_schema.sql:ro
      - ./sql/rag_indexes.sql:/docker-entrypoint-initdb.d/20_rag_indexes.sql:ro
      - ./sql/dev_knowledge_graph_schema.sql:/docker-entrypoint-initdb.d/30_dev_knowledge_graph_schema.sql:ro
      - ./sql/events_unified_schema.sql:/docker-entrypoint-initdb.d/40_events_unified_schema.sql:ro
      - ./sql/unified_knowledge_graph_schema.sql:/docker-entrypoint-initdb.d/41_unified_knowledge_graph_schema.sql:ro
  - ./sql/41_ingestion_manifest.sql:/docker-entrypoint-initdb.d/41_ingestion_manifest.sql:ro
  - ./sql/swarm_schema.sql:/docker-entrypoint-initdb.d/45_swarm_schema.sql:ro
      - ./sql/inference_logging.sql:/docker-entrypoint-initdb.d/50_inference_logging.sql:ro
    networks:
      - zenglow_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d rag_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '1.5'
          memory: 6G
        reservations:
          cpus: '0.25'
          memory: 512M
    secrets:
      - pg_password

  db_pii:
    image: pgvector/pgvector:pg15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD_FILE: /run/secrets/pg_password
      POSTGRES_DB: rag_pii
    volumes:
      - pgdata_pii:/var/lib/postgresql/data
      - ./sql/pii_secure_schema.sql:/docker-entrypoint-initdb.d/10_pii_secure_schema.sql:ro
    networks:
      - zenglow_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d rag_pii"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '1.0'
          memory: 4G
        reservations:
          cpus: '0.25'
          memory: 256M
    secrets:
      - pg_password

  redis:
    image: redis:7-alpine
    command: ["redis-server", "--save", "60", "1000", "--appendonly", "yes"]
    volumes:
      - redis_data:/data
    networks:
      - zenglow_net
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
    ports:
      - target: 6379
        published: 6379
        protocol: tcp
        mode: ingress

  app:
    image: ghcr.io/zen-glow/dev-indexer-app:latest
    environment:
      DATABASE_URL: ${DATABASE_URL:-postgresql://postgres:__PW__@db:5432/rag_db}
      PII_DATABASE_URL: ${PII_DATABASE_URL:-postgresql://postgres:__PW__@db_pii:5432/rag_pii}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      API_EXTERNAL_URL: ${API_EXTERNAL_URL:-http://localhost:8000}
      JWT_SECRET: ${JWT_SECRET:-dev-only-override}
      LEGACY_JWT_FILE: /run/secrets/legacy_jwt
      SUPABASE_JWT_FILE: /run/secrets/supabase_jwt
    secrets:
      - legacy_jwt
      - supabase_jwt
      - pg_password
    networks:
      - zenglow_net
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost:8000/health || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '1.0'
          memory: 4G
        reservations:
          cpus: '0.25'
          memory: 512M
    ports:
      - target: 8000
        published: 8001
        protocol: tcp
        mode: ingress

  pg_bridge:
    image: ghcr.io/zen-glow/dev-indexer-app:latest
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PREFIX: pg_events:
      REDIS_ROUTE_BY_TYPE: "true"
      PG_LISTEN_CHANNELS: ingest_manifest
      # DATABASE_URL will be set via entrypoint using pg_password secret
    command: ["/bin/sh", "-lc", "export DATABASE_URL=postgresql://postgres:$(cat /run/secrets/pg_password)@db:5432/rag_db && python /app/scripts/pg_notify_to_redis_bridge.py"]
    networks:
      - zenglow_net
    depends_on:
      - db
      - redis
    secrets:
      - pg_password
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.25'
          memory: 256M

  spool_watcher:
    image: ghcr.io/zen-glow/dev-indexer-app:latest
    environment:
      SPOOL_DIR: /data/spool
      SPOOL_TRIGGER_SIZE_MB: 100
      PROCESS_SPOOL_SCRIPT_PATH: /app/scripts/process_spool.sh
      LOCK_FILE: /tmp/spool_watcher.lock
      PYTHON_REPLAY_SCRIPT: /app/scripts/rag_replay_msgpack.py
      RAG_LOG_FILE: /var/log/rag_ingestion.log
      REDIS_HOST: redis
      REDIS_PORT: 6379
      # DATABASE_URL via secret
    command: ["/bin/sh", "-lc", "export DATABASE_URL=postgresql://postgres:$(cat /run/secrets/pg_password)@db:5432/rag_db && python /app/scripts/spool_watcher.py"]
    volumes:
      - spool_data:/data/spool
    networks:
      - zenglow_net
    depends_on:
      - db
      - redis
    secrets:
      - pg_password
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.25'
          memory: 512M

  embedding_worker:
    image: ghcr.io/zen-glow/dev-indexer-app:latest
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      EMBED_SUB_CHANNEL: pg_events:ingest.manifest
      EMBED_READY_CHANNEL: pg_events:ingest.ready
      # If needed later: DATABASE_URL for DB lookups
    command: ["python", "/app/scripts/embedding_worker_stub.py"]
    networks:
      - zenglow_net
    depends_on:
      - redis
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.25'
          memory: 256M

  embed_model:
    image: ghcr.io/zen-glow/dev-indexer-app:latest
    environment:
      SERVE_MODEL: ${SERVE_MODEL:-BAAI/bge-small-en-v1.5}
      SERVE_HOST: 0.0.0.0
      SERVE_PORT: 8010
      SERVE_CONCURRENCY: 2
      SERVE_BATCH_SIZE: 32
      SERVE_NORMALIZE: "1"
    command: ["python", "/app/scripts/serve_embedding_model.py", "--port", "8010"]
    networks:
      - zenglow_net
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '1.0'
          memory: 3G
        reservations:
          cpus: '0.25'
          memory: 512M

  async_embedding_worker:
    image: ghcr.io/zen-glow/dev-indexer-app:latest
    environment:
      EMBED_ENDPOINT: http://embed_model:8010/model/embed
      BATCH_SIZE: 32
      POLL_INTERVAL: 5
    command: ["/bin/sh", "-lc", "export DATABASE_URL=postgresql://postgres:$(cat /run/secrets/pg_password)@db:5432/rag_db && python /app/scripts/async_embedding_worker.py --hash-content"]
    networks:
      - zenglow_net
    depends_on:
      - db
      - embed_model
    secrets:
      - pg_password
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
