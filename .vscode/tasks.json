{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "Run Project (Dashboard)",
      "type": "shell",
      "command": "npm start",
      "options": { "cwd": "${workspaceFolder}/dev-indexer_1/dashboard" },
      "group": { "kind": "build", "isDefault": true },
      "presentation": { "reveal": "always" }
    },
    {
      "label": "Memoryâ†’RAG Bridge",
      "type": "shell",
      "command": "bash -lc 'source .venv/bin/activate 2>/dev/null || true; python dev-indexer_1/mcp/memory_rag_bridge.py'",
      "problemMatcher": [],
      "isBackground": true,
      "presentation": { "reveal": "never" },
      "detail": "Continuously ingest MCP memory file into pgvector"
    },
    {
      "label": "Run All Tests",
      "type": "shell",
      "command": "bash run_tests.sh",
      "group": "test",
      "problemMatcher": [],
      "presentation": { "reveal": "always", "panel": "shared" },
      "detail": "Execute repository Python tests via run_tests.sh"
    },
    {
      "label": "ðŸš€ Launch GUI: Beast3 (Model Training)",
      "type": "shell",
      "command": "remmina -c ~/.local/share/remmina/beast3_cgb808.remmina",
      "problemMatcher": [],
      "presentation": { "reveal": "never" }
    },
    {
      "label": "SSH Exec (Beast3 One-Off)",
      "type": "shell",
      "command": "ssh cgb808@192.168.1.133 \"${input:RemoteCommand}\"",
      "problemMatcher": [],
      "presentation": { "reveal": "always", "panel": "shared" },
      "detail": "Execute a single non-interactive command remotely on beast3 using the RemoteCommand input"
    },
    {
      "label": "Launch GUI Beast3",
      "type": "shell",
      "command": "remmina -c ~/.local/share/remmina/beast3_cgb808.remmina",
      "problemMatcher": [],
      "presentation": { "reveal": "never" }
    },
    {
      "label": "ðŸš€ Launch GUI: Beast1 (Data Ingestion)",
      "type": "shell",
      "command": "remmina -c ~/.local/share/remmina/beast1_cgbowen.remmina",
      "problemMatcher": [],
      "presentation": { "reveal": "never" },
      "icon": { "id": "vm-connect", "color": "terminal.ansiBlue" }
    },
    {
      "label": "Launch GUI Beast1",
      "type": "shell",
      "command": "remmina -c ~/.local/share/remmina/beast1_cgbowen.remmina",
      "problemMatcher": [],
      "presentation": { "reveal": "never" }
    },
    {
      "label": "SSH: Beast3",
      "type": "shell",
      "command": "ssh cgb808@192.168.1.133",
      "problemMatcher": [],
      "presentation": { "reveal": "always", "panel": "shared" },
      "detail": "Interactive SSH session to beast3 GPU box"
    },
    {
      "label": "Fix XRDP Beast3",
      "type": "shell",
      "command": "ssh cgb808@192.168.1.133 bash -lc 'set -euo pipefail; echo [fix] XRDP/XFCE install; sudo apt-get update; sudo DEBIAN_FRONTEND=noninteractive apt-get install -y xrdp xfce4 xfce4-goodies xorg dbus-x11 x11-xserver-utils xorgxrdp policykit-1 || true; echo startxfce4 > ~/.xsession; chmod 644 ~/.xsession; grep -q \"exec /bin/sh ~/.xsession\" /etc/xrdp/startwm.sh || sudo sed -i \"/X11\\/Xsession/ i if [ -r ~/.xsession ]; then exec /bin/sh ~/.xsession; fi\" /etc/xrdp/startwm.sh; sudo systemctl restart xrdp; ss -tlnp | grep 3389 || true; echo [fix] Done.'",
      "problemMatcher": [],
      "presentation": { "reveal": "always", "panel": "shared" },
      "detail": "Apply XRDP + XFCE repair on beast3"
    },
    {
      "label": "Bootstrap Beast3 Env",
      "type": "shell",
      "command": "ssh cgb808@192.168.1.133 'bash -s' < dev-indexer_1/scripts/beast3_bootstrap.sh",
      "problemMatcher": [],
      "presentation": { "reveal": "always", "panel": "shared" },
      "detail": "Provision Python venv, install deps, prepare .env on beast3"
    },
    {
      "label": "Model Smoke Test (Beast3)",
      "type": "shell",
      "command": "ssh cgb808@192.168.1.133 'source .venv/bin/activate 2>/dev/null || true; python dev-indexer_1/scripts/model_smoke_test.py'",
      "problemMatcher": [],
      "presentation": { "reveal": "always", "panel": "shared" },
      "detail": "Run torch/transformers availability report on beast3"
    },
    {
      "label": "Diagnose XRDP Beast3",
      "type": "shell",
      "command": "ssh cgb808@192.168.1.133 bash -lc 'echo [diag] xrdp status; systemctl is-active xrdp || systemctl status --no-pager xrdp; echo [diag] listening ports; ss -tlnp | grep 3389 || echo no_3389; echo [diag] last sesman errors; grep -iE \"error|fail\" /var/log/xrdp-sesman.log | tail -n 15 || true; echo [diag] last sesman tail; tail -n 25 /var/log/xrdp-sesman.log; echo [diag] startwm.sh; head -n 40 /etc/xrdp/startwm.sh; echo [diag] user .xsession; ls -l ~/.xsession || true; cat ~/.xsession 2>/dev/null || true; echo [diag] xrdp.log tail; tail -n 40 /var/log/xrdp.log'",
      "problemMatcher": [],
      "presentation": { "reveal": "always", "panel": "shared" },
      "detail": "Gather XRDP service, port, and log diagnostics from beast3"
    },
    {
      "label": "Probe Beast3 Network",
      "type": "shell",
      "command": "bash -lc 'echo [probe] ping; ping -c1 192.168.1.133 || echo ping_fail; echo [probe] port 22; (command -v nc >/dev/null && nc -vz 192.168.1.133 22) || (command -v timeout >/dev/null && timeout 3 bash -c \"</dev/tcp/192.168.1.133/22\" && echo open || echo closed) || true; echo [probe] port 3389; (command -v nc >/dev/null && nc -vz 192.168.1.133 3389) || (command -v timeout >/dev/null && timeout 3 bash -c \"</dev/tcp/192.168.1.133/3389\" && echo open || echo closed) || true; echo [probe] arp entry; (ip neigh show 192.168.1.133 || arp -an | grep 192.168.1.133 || true)'",
      "problemMatcher": [],
      "presentation": { "reveal": "always", "panel": "shared" },
      "detail": "Check reachability and port openness for beast3 before SSH/XRDP diagnostics"
    },
    {
      "label": "SSH: Beast1",
      "type": "shell",
      "command": "ssh cgbowen@192.168.1.192",
      "problemMatcher": [],
      "presentation": { "reveal": "always", "panel": "shared" },
      "detail": "Interactive SSH session to beast1"
    },
    {
      "label": "Ollama Setup (Beast3 Local)",
      "type": "shell",
      "command": "bash dev-indexer_1/scripts/ollama_setup.sh",
      "problemMatcher": [],
      "presentation": { "reveal": "always", "panel": "shared" },
      "detail": "Install Ollama + gemma:2b + optional quant q4 (run INSIDE beast3 terminal)"
    },
    {
      "label": "Ollama Health (Beast3 Local)",
      "type": "shell",
      "command": "bash -lc 'curl -s http://localhost:11434/api/tags || curl -s http://127.0.0.1:11434/api/tags'",
      "problemMatcher": [],
      "presentation": { "reveal": "always", "panel": "shared" },
      "detail": "List installed Ollama models (run inside beast3)"
    },
    {
      "label": "Compound: Beast3 Bootstrap + Smoke",
      "dependsOn": ["Bootstrap Beast3 Env", "Model Smoke Test (Beast3)"],
      "dependsOrder": "sequence",
      "problemMatcher": []
    },
    {
      "label": "Ollama Step 1: Prepare Storage (Local Beast3)",
      "type": "shell",
      "command": "STEP=1 bash dev-indexer_1/scripts/ollama_steps.sh",
      "problemMatcher": [],
      "presentation": { "reveal": "always", "panel": "shared" },
      "detail": "Create ZFS dataset/dir and ensure model path exists"
    },
    {
      "label": "Ollama Step 2: Install Binary (Local Beast3)",
      "type": "shell",
      "command": "STEP=2 bash dev-indexer_1/scripts/ollama_steps.sh",
      "problemMatcher": [],
      "presentation": { "reveal": "always", "panel": "shared" },
      "detail": "Install Ollama and enable service"
    },
    {
      "label": "Ollama Step 3: Configure Service (Local Beast3)",
      "type": "shell",
      "command": "STEP=3 bash dev-indexer_1/scripts/ollama_steps.sh",
      "problemMatcher": [],
      "presentation": { "reveal": "always", "panel": "shared" },
      "detail": "Apply systemd overrides (model dir, keep alive)"
    },
    {
      "label": "Ollama Step 4: Pull Models (Local Beast3)",
      "type": "shell",
      "command": "STEP=4 bash dev-indexer_1/scripts/ollama_steps.sh",
      "problemMatcher": [],
      "presentation": { "reveal": "always", "panel": "shared" },
      "detail": "Pull gemma:2b and create quantized variant"
    },
    {
      "label": "Ollama Step 5: Smoke Test (Local Beast3)",
      "type": "shell",
      "command": "STEP=5 bash dev-indexer_1/scripts/ollama_steps.sh",
      "problemMatcher": [],
      "presentation": { "reveal": "always", "panel": "shared" },
      "detail": "List models and run generate ping"
    },
    {
      "label": "Storage Inspect (Local Beast3)",
      "type": "shell",
      "command": "bash dev-indexer_1/scripts/storage_validate.sh",
      "problemMatcher": [],
      "presentation": { "reveal": "always", "panel": "shared" },
      "detail": "List block devices, pools, datasets (read-only)"
    },
    {
      "label": "Storage Create Pool (Edit Vars First)",
      "type": "shell",
      "command": "CREATE_POOL=1 ZPOOL_NAME=tank ZPOOL_DISK=/dev/EDITME bash dev-indexer_1/scripts/storage_validate.sh",
      "problemMatcher": [],
      "presentation": { "reveal": "always", "panel": "shared" },
      "detail": "Template to create ZFS pool; set proper disk path before running"
    },
    {
      "label": "Storage Create Dataset tank/ollama",
      "type": "shell",
      "command": "CREATE_DATASET=1 DATASET=tank/ollama bash dev-indexer_1/scripts/storage_validate.sh",
      "problemMatcher": [],
      "presentation": { "reveal": "always", "panel": "shared" },
      "detail": "Create dataset tank/ollama if pool exists"
    },
    {
      "label": "SSH: Beast3 (Key Auth)",
      "type": "shell",
      "command": "ssh -i ~/.ssh/id_ed25519 -o IdentitiesOnly=yes -o PreferredAuthentications=publickey -o PubkeyAuthentication=yes cgb808@192.168.1.133",
      "problemMatcher": [],
      "presentation": { "reveal": "always", "panel": "shared" },
      "detail": "Key-based interactive SSH session to beast3"
    },
    {
      "label": "Remote Ollama Steps 1-3",
      "type": "shell",
      "command": "ssh -i ~/.ssh/id_ed25519 cgb808@192.168.1.133 'cd ZenGlow || cd ~/ZenGlow || true; STEP=1 bash dev-indexer_1/scripts/ollama_steps.sh; STEP=2 bash dev-indexer_1/scripts/ollama_steps.sh; STEP=3 bash dev-indexer_1/scripts/ollama_steps.sh'",
      "problemMatcher": [],
      "presentation": { "reveal": "always", "panel": "shared" },
      "detail": "Run storage prep, install Ollama, apply config remotely"
    },
    {
      "label": "Remote Ollama Step 4 (Models)",
      "type": "shell",
      "command": "ssh -i ~/.ssh/id_ed25519 cgb808@192.168.1.133 'cd ZenGlow || cd ~/ZenGlow || true; STEP=4 bash dev-indexer_1/scripts/ollama_steps.sh'",
      "problemMatcher": [],
      "presentation": { "reveal": "always", "panel": "shared" },
      "detail": "Pull gemma:2b and quantized variant remotely"
    },
    {
      "label": "Remote Ollama Step 5 (Smoke)",
      "type": "shell",
      "command": "ssh -i ~/.ssh/id_ed25519 cgb808@192.168.1.133 'cd ZenGlow || cd ~/ZenGlow || true; STEP=5 bash dev-indexer_1/scripts/ollama_steps.sh'",
      "problemMatcher": [],
      "presentation": { "reveal": "always", "panel": "shared" },
      "detail": "List models & generate ping remotely"
    },
    {
      "label": "Remote Ollama Full (1-5)",
      "type": "shell",
      "command": "ssh -i ~/.ssh/id_ed25519 cgb808@192.168.1.133 'cd ZenGlow || cd ~/ZenGlow || true; for s in 1 2 3 4 5; do STEP=$s bash dev-indexer_1/scripts/ollama_steps.sh; done'",
      "problemMatcher": [],
      "presentation": { "reveal": "always", "panel": "shared" },
      "detail": "Complete remote Ollama setup and smoke test"
    },
    {
      "label": "Remote GPU / Env Check",
      "type": "shell",
      "command": "ssh -i ~/.ssh/id_ed25519 cgb808@192.168.1.133 'hostname; uname -a; which nvidia-smi && nvidia-smi -L || echo no_nvidia; df -h | head -n 15; free -h; ps -eo pid,comm,%mem,%cpu --sort=-%mem | head -n 10'",
      "problemMatcher": [],
      "presentation": { "reveal": "always", "panel": "shared" },
      "detail": "Quick resource + GPU availability snapshot"
    },
    {
      "label": "Remote Ollama Bootstrap (Home)",
      "type": "shell",
      "command": "ssh cgb808@192.168.1.133 'bash ZenGlow/dev-indexer_1/scripts/remote_ollama_bootstrap.sh || bash dev-indexer_1/scripts/remote_ollama_bootstrap.sh'",
      "problemMatcher": [],
      "presentation": { "reveal": "always", "panel": "shared" },
      "detail": "Run one-shot Ollama + gemma2b setup using home directory"
    },
    {
      "label": "Vault: Pull .env",
      "type": "shell",
      "command": "bash scripts/vault_env_sync.sh pull",
      "problemMatcher": [],
      "presentation": { "reveal": "always", "panel": "shared" },
      "detail": "Pull secrets from Vault KV v2 into .env (creates backup)"
    },
    {
      "label": "Vault: Push .env (Patch)",
      "type": "shell",
      "command": "bash scripts/vault_env_sync.sh push",
      "problemMatcher": [],
      "presentation": { "reveal": "always", "panel": "shared" },
      "detail": "Patch Vault KV v2 with non-empty vars from .env"
    },
    {
      "label": "Vault: List Keys",
      "type": "shell",
      "command": "bash scripts/vault_env_sync.sh list",
      "problemMatcher": [],
      "presentation": { "reveal": "always", "panel": "shared" },
      "detail": "List current keys stored at VAULT_SECRETS_PATH"
    },
    {
      "label": "Vault: Diff (.env vs Vault)",
      "type": "shell",
      "command": "bash scripts/vault_env_sync.sh diff",
      "problemMatcher": [],
      "presentation": { "reveal": "always", "panel": "shared" },
      "detail": "Show which keys will add/change/remove"
    },
    {
      "label": "Vault: Push (Dry Run)",
      "type": "shell",
      "command": "DRY_RUN=1 bash scripts/vault_env_sync.sh push",
      "problemMatcher": [],
      "presentation": { "reveal": "always", "panel": "shared" },
      "detail": "Simulate push without modifying Vault"
    },
    {
      "label": "Vault: Prune Orphans (Dry)",
      "type": "shell",
      "command": "DRY_RUN=1 bash scripts/vault_env_sync.sh prune",
      "problemMatcher": [],
      "presentation": { "reveal": "always", "panel": "shared" },
      "detail": "Dry-run removal of Vault keys not present locally"
    },
    {
      "label": "Vault: Prune Orphans (Confirm)",
      "type": "shell",
      "command": "PRUNE_CONFIRM=YES bash scripts/vault_env_sync.sh prune",
      "problemMatcher": [],
      "presentation": { "reveal": "always", "panel": "shared" },
      "detail": "Delete Vault keys missing from local .env (requires PRUNE_CONFIRM=YES)"
    },
    {
      "label": "Env: Generate Redacted Copy",
      "type": "shell",
      "command": "bash scripts/env_generate_redacted.sh",
      "problemMatcher": [],
      "presentation": { "reveal": "always", "panel": "shared" },
      "detail": "Create .env.redacted with masked values for safe viewing"
    },
    {
      "label": "GitHub PAT: Validate Token",
      "type": "shell",
      "command": "bash scripts/github_pat_check.sh",
      "problemMatcher": [],
      "presentation": { "reveal": "always", "panel": "shared" },
      "detail": "Run helper to validate GITHUB_PAT (requires it exported or in .env)"
    },
    // --- Added SSH convenience tasks for user cgbowen (AIWorkspace) ---
    {
      "label": "SSH: Beast3 (cgbowen)",
      "type": "shell",
      "command": "ssh -i ~/.ssh/id_ed25519 -o IdentitiesOnly=yes -o PreferredAuthentications=publickey -o PubkeyAuthentication=yes cgbowen@192.168.1.133",
      "problemMatcher": [],
      "presentation": { "reveal": "always", "panel": "shared", "focus": true },
      "detail": "Interactive SSH session (correct user cgbowen)"
    },
    {
      "label": "SSH: Beast3 Workspace (AIWorkspace)",
      "type": "shell",
      "command": "ssh -t -i ~/.ssh/id_ed25519 -o IdentitiesOnly=yes -o PreferredAuthentications=publickey -o PubkeyAuthentication=yes cgbowen@192.168.1.133 'cd AIWorkspace || cd ZenGlowAIWorkshop; exec bash'",
      "problemMatcher": [],
      "presentation": { "reveal": "always", "panel": "shared", "focus": true },
      "detail": "SSH directly into project workspace directory"
    },
    {
      "label": "SSHFS Mount Beast3 AIWorkspace",
      "type": "shell",
      "command": "bash -lc 'mkdir -p remote_beast3_aiworkspace; sshfs -o IdentityFile=~/.ssh/id_ed25519 cgbowen@192.168.1.133:/home/cgbowen/AIWorkspace remote_beast3_aiworkspace && echo [mount] done || echo [mount] failed'",
      "problemMatcher": [],
      "presentation": { "reveal": "always", "panel": "shared" },
      "detail": "Mount remote AIWorkspace via sshfs into ./remote_beast3_aiworkspace"
    },
    {
      "label": "SSHFS Unmount Beast3 AIWorkspace",
      "type": "shell",
      "command": "bash -lc 'if mount | grep -q remote_beast3_aiworkspace; then (fusermount -u remote_beast3_aiworkspace 2>/dev/null || umount remote_beast3_aiworkspace) && echo [unmount] done || echo [unmount] failed; else echo [unmount] not_mounted; fi'",
      "problemMatcher": [],
      "presentation": { "reveal": "always", "panel": "shared" },
      "detail": "Unmount sshfs mount if present"
    }
  ],
  "inputs": [
    {
      "id": "RemoteCommand",
      "type": "promptString",
      "description": "Command to run on beast3 (executed via SSH)",
      "default": "hostname && uptime"
    }
  ]
}
